@{
    ViewData["Title"] = "Calendar";
}
@* <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.17/index.global.min.js"></script> *@

@* <div class="text-center"> *@
@*     <h1 class="display-4">Calendário</h1> *@
@*     <div id="calendar"></div> *@
@* </div> *@

<div class="card">
    <div class="card-body calender-sidebar app-calendar">
        <div id="calendar"></div>
    </div>
</div>

@* <div class="row justify-content-end"> *@
@*     <div class="pt-3" style="width: fit-content"> *@
@*         <button class="btn btn-primary" onclick="openCreationModal()"> *@
@*             Adicionar Marcação *@
@*         </button> *@
@*     </div> *@
@* </div> *@

@* BOOTSTRAP MODAL FOR CREATING THE APOINTMENTS *@
<div class="modal fade" id="createApointmentModal" tabindex="-1" role="dialog" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createApointmentModalTitle"> Criar Marcação </h5>
                <button type="button" class="btn-close" onclick="clearAndCloseCreationModal()" aria-label="Close"></button>
            </div>
            <div id="createApointmentModalBody" class="modal-body">
                <div class="my-1">
                    <label> Título </label>
                    <input class="form-control" type="text" id="createAppointmentTitle" placeholder="Título">
                </div>
                
                <div class="my-1">
                    <label> Descrição </label>
                    <input class="form-control" type="text" id="createAppointmentDescription" placeholder="Descrição">
                </div>

                <div class="my-1">
                    <label> Dia </label>
                    <input class="form-control" id="createAppointmentDia" type="date">
                </div>

                <div class="row my-1">
                    <div class="col-md-6">
                        <label> Hora Início </label>
                        <input class="form-control" id="createAppointmentStart" type="time">
                    </div>
                    <div class="col-md-6">
                        <label> Hora Fim </label>
                        <input class="form-control" id="createAppointmentEnd" type="time">
                    </div>
                </div>
                
                <div class="my-1">
                    <label> Funcionário </label>
                    <select id="createAppointmentEmployee" class="form-select">
                        <option value="0"> - </option>
                        @foreach (Employee employee in ViewBag.Employees)
                        {
                            <option value="@employee.Id">@employee.Name</option>
                        }
                    </select>
                </div>
                
                <div class="my-1">
                    <label> Cliente </label>
                    <select id="createAppointmentClient" class="form-select">
                        <option value="0">-</option>
                        @foreach (Client client in ViewBag.Clients)
                        {
                            <option value="@client.Id">@client.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" onclick="clearAndCloseCreationModal()">Cancelar</button>
                <button type="button" class="btn btn-primary" id="createUpdateButton" onclick="createUpdateAppointment()">Criar</button>
            </div>
        </div>
    </div>
</div>

@* BOOTSTRAP MODAL FOR THE APOINTMENTS DATA *@
<div class="modal fade" id="apointmentModal" tabindex="-1" role="dialog" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="apointmentModalTitle"></h5>
                <button type="button" class="btn-close" onclick="clearAndCloseAppointmentModal()" aria-label="Close"></button>
            </div>
            <div id="apointmentModalBody" class="modal-body">
                
            </div>
            <div class="modal-footer">
                <div class="col-6 d-flex justify-content-start mx-0">
                    <button type="button" class="btn btn-danger" onclick="deleteAppointment()">Eliminar</button>
                </div>
                <div class="col-6 d-flex justify-content-end mx-0">
                    <button type="button" class="btn btn-primary" onclick="startAppointmentEdition()">Editar</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
      //page variables
      let calendar
      let popUpAppointmentsId = 0
      let appointmentBeingEditedId = 0

      let calendarHeaderToolbar = {
          left: "prev next addEventButton",
          center: "title",
          right: "dayGridMonth,timeGridWeek,timeGridDay",
      }
      
      //calendar part
      document.addEventListener('DOMContentLoaded', function() {
        var calendarEl = document.getElementById('calendar');
        calendar = new FullCalendar.Calendar(calendarEl, {
          height: "auto",
          initialView: checkWidowWidth() ? "timeGridDay" : "timeGridWeek",
          headerToolbar: calendarHeaderToolbar,
          customButtons: {
              addEventButton: {
                  text: "Adicionar Marcação",
                  click: openCreationModal,
              },
          },
          eventClassNames: function ({ event: calendarEvent }) {    //for now we will let them be all the same color
              return ["event-fc-color fc-bg-success"];
          },
          slotMinTime: '08:00:00',
          slotMaxTime: '18:00:00',
          events: function(fetchInfo, successCallback, failureCallback) {
              // fetchInfo has start and end dates
              fetch('/Apointments/GetCalendarEvents?start=' + encodeURIComponent(fetchInfo.startStr) + '&end=' + encodeURIComponent(fetchInfo.endStr))
                  .then(response => response.json())
                  .then(data => successCallback(data))
                  .catch(error => failureCallback(error))
          },
          eventClick: function (info) {
              const event = info.event

              // Set modal content
              document.getElementById('apointmentModalTitle').innerText = event.title
              document.getElementById('apointmentModalBody').innerText = event.extendedProps.description || 'No details'
              showModal('apointmentModal')
              
              //so we know what appointment we are messing with
              popUpAppointmentsId = event.extendedProps.id
          }
        });
        calendar.render()
      });
      
      //onclick functions
      function clearAndCloseCreationModal() {
          appointmentBeingEditedId = 0;
          
          let modalId = 'createApointmentModal'
          clearModal(modalId)
          hideModal(modalId)
      }
      async function createUpdateAppointment() {
          let appointmentInfo = {
              title: document.getElementById('createAppointmentTitle').value,
              description: document.getElementById('createAppointmentDescription').value,
              date: document.getElementById('createAppointmentDia').value,
              startTime: document.getElementById('createAppointmentStart').value,
              endTime: document.getElementById('createAppointmentEnd').value,
              employeeId: document.getElementById('createAppointmentEmployee').value,
              clientId: document.getElementById('createAppointmentClient').value,
          }
          
          try {
              if (appointmentBeingEditedId == 0) {
                  const res = await fetch('/Apointments/CreateAppointment', {
                      method: 'POST',
                      headers: {
                          'Content-Type': 'application/json'
                      },
                      body: JSON.stringify(appointmentInfo)
                  })
              }
              else {
                  const res = await fetch(`/Apointments/UpdateAppointment?id=${appointmentBeingEditedId}`, {
                      method: 'PUT',
                      headers: {
                          'Content-Type': 'application/json'
                      },
                      body: JSON.stringify(appointmentInfo)
                  })
              }
          } catch (error) {
              console.error('Error creating or updating appointment:', error);
          }

          //clear and close the modal after creating the appointment and then refreshing the calendar
          clearAndCloseCreationModal()
          calendar.refetchEvents()
      }
      function clearAndCloseAppointmentModal() {
          popUpAppointmentsId = 0

          let modalId = 'apointmentModal'
          clearModal(modalId)
          hideModal(modalId)
      }
      async function deleteAppointment() {
          try {
              const res = await fetch(`/Apointments/DeleteAppointment?id=${popUpAppointmentsId}`, {
                  method: 'DELETE',
                  headers: {
                      'Content-Type': 'application/json'
                  },
              })
          } catch (error) {
              console.error('Error deleting appointment:', error);
          }

          //clear and close the modal after creating the appointment and then refreshing the calendar
          clearAndCloseAppointmentModal()
          calendar.refetchEvents()
      }
      async function startAppointmentEdition() {
          let appointmentInfo
          //get the apointment data and fill the createApointmentModal fields
          try {
              const res = await fetch(`/Apointments/GetAppointment?id=${popUpAppointmentsId}`, {
                  method: 'GET',
                  headers: {
                      'Content-Type': 'application/json'
                  },
              })

              appointmentInfo = await res.json()
          } catch (error) {
              console.error('Error creating appointment:', error);
          }
          
          //set the fields to the respective values so they can be edited
          document.getElementById('createAppointmentTitle').value = appointmentInfo.title
          document.getElementById('createAppointmentDescription').value = appointmentInfo.description
          document.getElementById('createAppointmentDia').value = appointmentInfo.date
          document.getElementById('createAppointmentStart').value = appointmentInfo.startTime
          document.getElementById('createAppointmentEnd').value = appointmentInfo.endTime
          document.getElementById('createAppointmentEmployee').value = appointmentInfo.employeeId
          document.getElementById('createAppointmentClient').value = appointmentInfo.clientId

          //set the id of the appointment been edited
          appointmentBeingEditedId = popUpAppointmentsId
          changeCreateUpdateButtonText('Atualizar')
          
          //change the modal on screen
          clearAndCloseAppointmentModal()
          showModal('createApointmentModal')
      }
      function openCreationModal() {
          changeCreateUpdateButtonText('Criar')
          showModal('createApointmentModal')
      }
      
      //support functions for the ofunctions above
      function changeCreateUpdateButtonText(text) {
          document.getElementById('createUpdateButton').textContent = text
      }
</script>

<script src="~/libs/fullcalendar/index.global.min.js"></script>
<script src="~/js/apps/calendar-init.js"></script>