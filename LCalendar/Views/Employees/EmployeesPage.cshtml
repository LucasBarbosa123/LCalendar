@{
    ViewData["Title"] = "Employees";
}
<div class="d-flex align-items-center">
    <iconify-icon icon="solar:chair-2-broken" class="aside-icon fs-5 me-1"></iconify-icon>
    <h4 class="font-weight-medium  mb-0">Funcionários</h4>
</div>

<nav class="mb-4" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a class="text-muted text-decoration-none" href="">Funcionários
            </a>
        </li>
        <li class="breadcrumb-item text-muted" aria-current="page">Funcionários</li>
    </ol>
</nav>

<div class="card">
    <div class="card-body">
        <!-- BUTTON FOR THE EMPLOYEE MODAL -->
        <div id="employeeButtonWrapper">
            <button type="button" class="btn btn-primary mb-2 d-flex align-items-center" onclick="openEmployeeModal()">
                <iconify-icon icon="solar:add-circle-broken" class="nav-small-cap-icon fs-6 me-1"></iconify-icon>
                Funcionário
            </button>
        </div>
        
        <div class="table-responsive">
            <table id="employeeTable" class="table w-100 table-bordered datatable-select-inputs text-nowrap">
                <thead>
                <tr>
                    <th>Nome</th>
                    <th>Email</th>
                    <th>Tipo de Perfil</th>
                    <th>Data de Criação</th>
                    <th></th>
                </tr>
                </thead>
            </table>
        </div>
    </div>
</div>

<!-- EMPLOYEE MODAL -->
<div class="modal fade" id="employeeModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false"  aria-labelledby="vertical-center-modal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header d-flex align-items-center">
                <h4 class="modal-title" id="employeeModalTitle">
                    Criar
                </h4>
                <button type="button" class="btn-close" aria-label="Close" onclick="clearAndCloseEmployeeModal()"></button>
            </div>
            <div class="modal-body">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" placeholder="Nome" id="employeeName" />
                    <label>
                        <iconify-icon icon="solar:user-broken" class="aside-icon fs-5 me-1"></iconify-icon>
                        <span class="border-start ps-3">Nome</span>
                    </label>
                </div>
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" placeholder="Email" id="employeeEmail" />
                    <label>
                        <iconify-icon icon="solar:letter-broken" class="aside-icon fs-5 me-1"></iconify-icon>
                        <span class="border-start ps-3">Email</span>
                    </label>
                </div>
                <div id="passwordDiv" class="form-floating mb-3">
                    <input type="password" class="form-control" id="employeePassword" placeholder="Password">
                    <label for="employeePassword">
                        <iconify-icon icon="solar:lock-keyhole-minimalistic-unlocked-broken" class="aside-icon fs-5 me-1"></iconify-icon>
                        <span class="border-start ps-3">Password</span>
                    </label>
                    <div class="position-absolute top-0 end-0 pe-2 pt-2">
                        <button class="btn btn-sm bg-secondary-subtle text-secondary" type="button" onclick="generateRandomPassword()">Gerar</button>
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label for="employeeRole">Tipo de Perfil</label>
                    <select class="form-control" id="employeeRole">
                        @foreach (Role role in ViewBag.Roles)
                        {
                            <option value="@role.Id">@role.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn bg-secondary-subtle text-secondary waves-effect text-start" onclick="clearAndCloseEmployeeModal()">
                    Close
                </button>
                <button id="employeeModalButton" type="button" class="btn bg-primary-subtle waves-effect text-start" onclick="createUpdateEmployee()">
                    Criar
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="employeeDelitionModal" tabindex="-1" aria-labelledby="vertical-center-modal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header d-flex align-items-center">
                <h4 class="modal-title" id="myLargeModalLabel">
                    Eliminar Funcionário
                </h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal" closeEmployeeDelitionModal()></button>
            </div>
            <div class="modal-body">
                <p>
                    Tem a creteza que pretende eliminar este funcionário?
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn bg-secondary-subtle text-secondary waves-effect text-start" onclick="closeEmployeeDelitionModal()">
                    Cancelar
                </button>
                <button type="button" class="btn bg-danger-subtle text-danger  waves-effect text-start" onclick="deleteEmployee()">
                    Eliminar
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    let table
    let employeeBeingEdited = 0
    let employeeBeenEliminated = 0
    
    //function that handles all the things that should happend on the page render
    runAfterRender(() => {
        let tableId= 'employeeTable';
        
        table = $(`#${tableId}`).DataTable({
            ajax: {
                url: '/Employees/GetAllEmployeesInfos',
                dataSrc: '' // tells DataTables to use the root array
            },
            columns: [
                { data: 'name' },
                { data: 'email' },
                { data: 'role' },
                { data: 'creationTime' },
                { data: 'buttons' }
            ],
            responsive: true,
        })
        addjustDataTablesTopSection(tableId, 'employeeButtonWrapper')
    })

    //functions to handle onclick
    function openEmployeeModal() {
        changeEmployeeModalsTitleText('Criar Funcionário')
        changeEmployeeModalsButtonText('Criar')

        document.getElementById('passwordDiv').classList.remove('d-none')
        showModal('employeeModal')
    }
    function clearAndCloseEmployeeModal() {
        employeeBeingEdited = 0

        let modalId = 'employeeModal'
        clearModal(modalId)
        hideModal(modalId)
    }
    async function deleteEmployee() {
        try {
            const res = await fetch(`/Employees/DeleteEmployee?id=${employeeBeenEliminated}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
            })
        } catch (error) {
            console.error('Error deleting employee:', error);
        }

        closeEmployeeDelitionModal()
        reloadEmployeesTable()
    }
    async function startEmployeeEdition(id) {
        let employeeInfo
        
        try {
            const res = await fetch(`/Employees/GetEmployeeInfo?id=${id}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                },
            })

            employeeInfo = await res.json()
        } catch (error) {
            console.error('Error creating appointment:', error);
        }

        document.getElementById('employeeName').value = employeeInfo.name
        document.getElementById('employeeEmail').value = employeeInfo.email
        document.getElementById('employeeRole').value = employeeInfo.roleId
        document.getElementById('employeePassword').value = ''

        employeeBeingEdited = id

        changeEmployeeModalsButtonText('Atualizar')
        changeEmployeeModalsTitleText('Editar Funcionário')

        document.getElementById('passwordDiv').classList.add('d-none')
        showModal('employeeModal')
    }
    async function createUpdateEmployee() {
        let employeeInfo = {
            name: document.getElementById('employeeName').value,
            email: document.getElementById('employeeEmail').value,
            password: document.getElementById('employeePassword').value,
            roleId: document.getElementById('employeeRole').value,
            img: ''
        }

        try {
            if (employeeBeingEdited == 0) {
                const res = await fetch('/Employees/CreateEmployee', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(employeeInfo)
                })
            }
            else {
                const res = await fetch(`/Employees/UpdateEmployee?id=${employeeBeingEdited}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(employeeInfo)
                })
            }
        } catch (error) {
            console.error('Error creating or updating appointment:', error);
        }

        clearAndCloseEmployeeModal()
        reloadEmployeesTable()
    }
    function startEmployeeDelition(id) {
        employeeBeenEliminated = id
        showModal('employeeDelitionModal')
    }
    function closeEmployeeDelitionModal() {
        employeeBeenEliminated = 0
        hideModal('employeeDelitionModal')
    }
    async function generateRandomPassword() {
        let passInput = document.getElementById('employeePassword')
        let radomPass = ''
        
        try {
            const res = await fetch(`/Utils/GetGeneratedPassword`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                },
            })

            radomPass = await res.json()
        } catch (error) {
            console.error('Error getting random password:', error);
        }

        passInput.value = radomPass.generatedPass
    }
    
    //support functions for the ofunctions above
    function changeEmployeeModalsButtonText(text) {
        document.getElementById('employeeModalButton').textContent = text
    }
    function changeEmployeeModalsTitleText(text) {
        document.getElementById('employeeModalTitle').textContent = text
    }
    function reloadEmployeesTable() {
        table.ajax.reload()
    }
</script>